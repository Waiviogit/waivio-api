#!/usr/bin/env node
require('dotenv').config();
const http = require('node:http');
const Sentry = require('@sentry/node');
const { getSentryOptions } = require('../constants/sentry');
const redis = require('../utilities/redis/redis');
const { closeMongoConnections } = require('../database');
const { sendSentryNotification } = require('../utilities/helpers/sentryHelper');

Sentry.init(getSentryOptions());
const app = require('../app');

const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);
const server = http.createServer(app);

(async () => {
  Sentry.setupExpressErrorHandler(app, {
    shouldHandleError(error) {
      return error.status >= 500;
    },
  });
  await redis.setupRedisConnections();

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})();

const signalHandler = async (signal) => {
  console.info(`${signal} signal received.`);
  console.log('Closing http server.');
  await server.close();
  console.log('Sever is closed...');
  await closeMongoConnections();
  process.exit(0);
};

process.on('SIGINT', signalHandler);
process.on('SIGTERM', signalHandler);
process.on('SIGQUIT', signalHandler);
process.on('unhandledRejection', (error) => {
  sendSentryNotification();
  Sentry.captureException(error);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portParsed = parseInt(val, 10);

  if (Number.isNaN(portParsed)) {
    // named pipe
    return val;
  }

  if (portParsed >= 0) {
    // port number
    return portParsed;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

  console.info(`Listening on ${bind}`);
}
